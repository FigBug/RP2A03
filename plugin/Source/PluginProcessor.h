/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Simple_Apu.h"
#include "slCommon.h"

//==============================================================================
/**
*/
class RP2A03AudioProcessor : public slProcessor
{
public:
    //==============================================================================
    RP2A03AudioProcessor();
    ~RP2A03AudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    
    LevelTracker& getOutputLevel() { return outputLevel; }
    
    static const char* paramPulse1Level;
    static const char* paramPulse1DutyCycle;
    static const char* paramPulse1A;
    static const char* paramPulse1D;
    static const char* paramPulse1S;
    static const char* paramPulse1R;
    
    static const char* paramPulse2Level;
    static const char* paramPulse2DutyCycle;
    
    static const char* paramTriangleLevel;
    
    static const char* paramNoiseLevel;
    static const char* paramNoiseShort;

private:
    void runUntil (int& done, AudioSampleBuffer& buffer, int pos);
    
    LevelTracker outputLevel {48.0};

    int lastNote = -1;
    int velocity = 0;
    Array<int> noteQueue;
    
    Simple_Apu apu;
    
    class ADSR
    {
    public:
        void set (float a, float d, float s, float r);
        
        void start (int level);
        void stop();
        
        bool run (int numSamples);
        int getCurrentLevel();
        
        float a = 0.0f, d = 0.0f, s = 0.0f , r = 0.0;
        float sampleRate = 44100.0f;
        int maxLevel = 0;
        int currentLevel = 0;
        int tic = 0, ticPerStep;
        
        enum Mode { mStop, mAttack, mDecay, mSustain, mRelease };
        Mode mode = mStop;
    };
    
    ADSR p1ADSR;
    
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (RP2A03AudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
